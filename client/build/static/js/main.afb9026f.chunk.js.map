{"version":3,"sources":["components/Header.js","components/LocationSearchInput.js","components/FilterSection.js","components/SpotsList.js","components/SpotCard.js","components/SpotsSection.js","components/MainContent.js","api/SpotsAPI.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","LocationSearchInput","props","handleChange","address","setState","updateLocation","handleSelect","geocodeByAddress","then","results","addressResult","formatted_address","getLatLng","latLng","console","log","catch","error","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","htmlFor","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","React","Component","FilterSection","filterData","setFilterData","getBestSpots","setSpots","getNearestSpot","setNearestSpot","experience","location","distance","e","target","name","onSubmit","a","preventDefault","lat","lng","Container","Form","Group","controlId","Label","Control","as","googleLocation","Button","type","SpotsList","spots","ListGroup","Item","length","spot","key","spot_id","spot_name","county_name","wind_speed","SpotCard","header","title","text","Card","Body","Title","Text","SpotsSection","nearestSpot","bestName","bestWindSpeed","nearestName","nearestWindSpeed","MainContent","Row","Col","md","url","axios","get","res","data","App","useState","useEffect","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.afb9026f.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst Header = () => {\n    return (\n        <Navbar bg='dark' variant='dark'>\n            <Navbar.Brand>Surfing Spots</Navbar.Brand>\n        </Navbar>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\n\nclass LocationSearchInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { address: '' };\n    }\n\n    handleChange = (address) => {\n        this.setState({ address });\n        this.props.updateLocation({});\n    };\n\n    handleSelect = (address) => {\n        geocodeByAddress(address)\n            .then((results) => {\n                const addressResult = results[0].formatted_address;\n                this.setState({ address: addressResult });\n\n                return getLatLng(results[0]);\n            })\n            .then((latLng) => {\n                console.log('Success', latLng);\n                this.props.updateLocation(latLng);\n            })\n            .catch((error) => console.error('Error', error));\n    };\n\n    render() {\n        return (\n            <PlacesAutocomplete\n                value={this.state.address}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}\n            >\n                {({\n                    getInputProps,\n                    suggestions,\n                    getSuggestionItemProps,\n                    loading,\n                }) => (\n                    <div className='form-group'>\n                        <label className='form-label' htmlFor='location-input'>\n                            Location\n                        </label>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Search Places ...',\n                                className: 'location-search-input form-control',\n                            })}\n                        />\n                        <div className='autocomplete-dropdown-container'>\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion) => {\n                                const className = suggestion.active\n                                    ? 'suggestion-item--active'\n                                    : 'suggestion-item';\n                                // inline style for demonstration purpose\n                                const style = suggestion.active\n                                    ? {\n                                          backgroundColor: '#fafafa',\n                                          cursor: 'pointer',\n                                      }\n                                    : {\n                                          backgroundColor: '#ffffff',\n                                          cursor: 'pointer',\n                                      };\n                                return (\n                                    <div\n                                        {...getSuggestionItemProps(suggestion, {\n                                            className,\n                                            style,\n                                        })}\n                                    >\n                                        <span>{suggestion.description}</span>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n        );\n    }\n}\n\nexport default LocationSearchInput;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport LocationSearchInput from './LocationSearchInput';\n\nconst FilterSection = ({\n    filterData,\n    setFilterData,\n    getBestSpots,\n    setSpots,\n    getNearestSpot,\n    setNearestSpot,\n}) => {\n    const { experience, location, distance } = filterData;\n\n    const onChange = (e) => {\n        setFilterData({ ...filterData, [e.target.name]: e.target.value });\n    };\n\n    const updateLocation = (googleLocation) => {\n        setFilterData({ ...filterData, location: googleLocation });\n    };\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n        getBestSpots(experience, location, distance, setSpots);\n\n        if (location.lat && location.lng) {\n            getNearestSpot(experience, location, distance, setNearestSpot);\n        }\n    };\n\n    return (\n        <Container>\n            <Form onSubmit={(e) => onSubmit(e)} className='filter-section'>\n                <Form.Group controlId='experience-dropdown'>\n                    <Form.Label>Experience</Form.Label>\n                    <Form.Control\n                        as='select'\n                        name='experience'\n                        onChange={(e) => onChange(e)}\n                    >\n                        <option value='novice'>Novice</option>\n                        <option value='intermediate'>Intermediate</option>\n                        <option value='expert'>Expert</option>\n                    </Form.Control>\n                </Form.Group>\n                {/* <Form.Group controlId='location-input'>\n                    <Form.Label>Location</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter location'\n                        name='location'\n                        onChange={(e) => onChange(e)}\n                    />\n                </Form.Group> */}\n                <LocationSearchInput updateLocation={updateLocation} />\n                <Form.Group controlId='distance-dropdown'>\n                    <Form.Label>Max Distance</Form.Label>\n                    <Form.Control\n                        as='select'\n                        name='distance'\n                        onChange={(e) => onChange(e)}\n                    >\n                        <option value='none'>None</option>\n                        <option value='1'>1km</option>\n                        <option value='5'>5km</option>\n                        <option value='10'>10km</option>\n                        <option value='25'>25km</option>\n                        <option value='50'>50km</option>\n                        <option value='100'>100km</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button variant='primary' type='submit'>\n                    Filter\n                </Button>\n            </Form>\n        </Container>\n    );\n};\n\nexport default FilterSection;\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst SpotsList = ({ spots }) => {\n    return (\n        <ListGroup>\n            <ListGroup.Item className='spots-list-header'>\n                <h4>Best Surfing Spots</h4>\n            </ListGroup.Item>\n            <div className='spots-list'>\n                {spots.length > 0 ? (\n                    spots.map((spot) => (\n                        <ListGroup.Item key={spot.spot_id}>\n                            <h5>{spot.spot_name + ', ' + spot.county_name}</h5>\n                            <p>{'Wind Speed: ' + spot.wind_speed + 'm/s'}</p>\n                        </ListGroup.Item>\n                    ))\n                ) : (\n                    <ListGroup.Item>\n                        <p>Please refine your search</p>\n                    </ListGroup.Item>\n                )}\n            </div>\n        </ListGroup>\n    );\n};\n\nexport default SpotsList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nconst SpotCard = ({ header, title, text }) => {\n    return (\n        <Card>\n            <Card.Header as='h5'>{header}</Card.Header>\n            <Card.Body>\n                <Card.Title>{title}</Card.Title>\n                <Card.Text>{text}</Card.Text>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default SpotCard;\n","import React from 'react';\n\nimport SpotCard from './SpotCard';\n\nconst SpotsSection = ({ spots, nearestSpot }) => {\n    const bestName =\n        spots.length > 0\n            ? spots[0].spot_name + ', ' + spots[0].county_name\n            : 'Please refine your search';\n    const bestWindSpeed =\n        spots.length > 0 ? 'Wind Speed: ' + spots[0].wind_speed + ' m/s' : '-';\n\n    const nearestName =\n        nearestSpot && nearestSpot.spot_name\n            ? nearestSpot.spot_name + ', ' + nearestSpot.county_name\n            : 'Please refine your search';\n    const nearestWindSpeed =\n        nearestSpot && nearestSpot.wind_speed\n            ? 'Wind Speed: ' + nearestSpot.wind_speed\n            : '-';\n\n    return (\n        <div className='spots-section'>\n            <SpotCard\n                header='Best Spot Today'\n                title={bestName}\n                text={bestWindSpeed}\n            />\n            <SpotCard\n                header='Nearest Quality Spot'\n                title={nearestName}\n                text={nearestWindSpeed}\n            />\n        </div>\n    );\n};\n\nexport default SpotsSection;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport SpotsList from './SpotsList';\nimport SpotsSection from './SpotsSection';\n\nconst MainContent = ({ spots, nearestSpot }) => {\n    return (\n        <Container>\n            <Row>\n                <Col md={6}>\n                    <SpotsList spots={spots} />\n                </Col>\n                <Col md={6}>\n                    <SpotsSection spots={spots} nearestSpot={nearestSpot} />\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default MainContent;\n","import axios from 'axios';\n\nexport const getBestSpots = async (\n    experience,\n    location,\n    distance,\n    setSpots\n) => {\n    try {\n        let url = 'api/spots/best/' + experience + '/?';\n\n        if (location.lat && location.lng) {\n            url = url + `latitude=${location.lat}&longitude=${location.lng}&`;\n\n            if (distance !== 'none') {\n                url = url + 'distance=' + distance;\n            }\n        }\n\n        console.log(url);\n\n        const res = await axios.get(url);\n\n        setSpots(res.data);\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getNearestSpot = async (\n    experience,\n    location,\n    distance,\n    setNearestSpot\n) => {\n    try {\n        let url = 'api/spots/nearest/' + experience + '/?';\n\n        if (location.lat && location.lng) {\n            url = url + `latitude=${location.lat}&longitude=${location.lng}&`;\n\n            if (distance !== 'none') {\n                url = url + 'distance=' + distance;\n            }\n        }\n\n        const res = await axios.get(url);\n\n        setNearestSpot(res.data[0]);\n    } catch (error) {\n        console.error(error);\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from './components/Header';\nimport FilterSection from './components/FilterSection';\nimport MainContent from './components/MainContent';\n\nimport { getBestSpots, getNearestSpot } from './api/SpotsAPI';\n\nfunction App() {\n    const [filterData, setFilterData] = useState({\n        experience: 'novice',\n        location: {},\n        distance: 'none',\n    });\n\n    const { experience, location, distance } = filterData;\n\n    const [spots, setSpots] = useState([]);\n    const [nearestSpot, setNearestSpot] = useState({});\n\n    useEffect(() => {\n        getBestSpots(experience, location, distance, setSpots);\n    }, []);\n\n    return (\n        <div className='App'>\n            <Header />\n            <FilterSection\n                filterData={filterData}\n                setFilterData={setFilterData}\n                getBestSpots={getBestSpots}\n                setSpots={setSpots}\n                getNearestSpot={getNearestSpot}\n                setNearestSpot={setNearestSpot}\n            />\n            <MainContent\n                filterData={filterData}\n                spots={spots}\n                nearestSpot={nearestSpot}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}